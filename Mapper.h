//
// Created by jakob on 26.06.24.
//

#ifndef MAPPER_H
#define MAPPER_H
#include <vector>
#include <memory>
#include "typedefs.h"
#include "DataCover.h"



namespace MapperLib {
class ComplexFactory;
class Complex;
class Clusterer;
class Projection;

/**
 * @class Mapper
 * @brief class implementing the Mapper algorithm
 *
 * Mapper is a data visualization algorithm. It takes a point cloud, projects it to a lower dimension, covers
 * the remaining space in overlapping hypercubes and clusters the original data in each of these hypercubes.
 * Overlapping clusters are now linked by simplices in accordance to the chosen complex.
 * The resulting simplicial complex is the output of the algorithm.
 */
class Mapper {
public:
    /**
     * Create a Mapper algorithm object
     * @param data_cover_factory factory creating the data cover to use
     * @param complex_factory factory creating the complex to use
     * @param clusterer the clustering algorithm to use
     * @param projection the projection to use.
     */
    Mapper(
        std::shared_ptr<DataCoverFactory> data_cover_factory,
        std::shared_ptr<ComplexFactory> complex_factory,
        std::shared_ptr<Clusterer> clusterer,
        std::shared_ptr<Projection> projection
    );

    /**
     * The main method of the Mapper algorithm
     * @param data data to apply the mapper algorithm to
     * @return the simplicial complex generated by the Mapper algorithm
     */
    [[nodiscard]] std::vector<Simplex> map(Matrix const& data) ;

private:
    std::shared_ptr<DataCoverFactory> _data_cover_factory;
    std::shared_ptr<ComplexFactory> _complex_factory;
    std::shared_ptr<Clusterer> _clusterer;
    std::shared_ptr<Projection> _projection;
    std::unique_ptr<DataCover> _data_cover;
    std::unique_ptr<Complex> _complex;
};

} // Mapper

#endif //MAPPER_H
